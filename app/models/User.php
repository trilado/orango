<?php

/**
 * @Entity("user")
 */
class User extends Model
{
	/**
	 * @AutoGenerated()
	 * @Column(Type="Int",Key="Primary")
	 */
	public $Id;
	
	/**
	 * @Column(Type="String")
	 * @Label("Nome") 
	 * @Required()
	 * @Regex(Pattern="^(.{3,})$",Message="O nome deve possuir pelo menos 3 caractéres!")
	 */
	public $Name;
	
	/**
	 * @Column(Type="String")
	 * @Label("E-mail") 
	 * @Required()
	 * @Regex(Pattern="^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$",Message="E-mail em formato invalido!")
	 */
	public $Email;
	
	/**
	 * @Column(Type="String")
	 * @Label("Senha") 
	 * @Required()
	 * @Regex(Pattern="^(.{6,})$",Message="A senha deve possuir pelo menos 6 caractéres!") 
	 */
	public $Password;
	
	/**
	 * @Column(Type="Int")
	 */
	public $Role;
	
	public function humanize()
	{
		$rId = $this->Role;
		$this->Role = new stdClass();
		if(!$rId)
			$rId = 1;
		$this->Role->Id = $rId;
		$this->Role->Name = self::$_roles[$rId];
		
		return $this;
	}
	
	public static $_roles = array(
		1 => 'Administrador',
		10 => 'Gerente',
		20 => 'Autor'
	);
	
	public static $_baseRoles = array(
		1 => 'Admin',
		10 => 'Manager',
		20 => 'Author'
	);
	
	public function getBaseRole()
	{
		return self::$_baseRoles[$this->Role];
	}
	
	public static function login($email, $password)
	{
		$db = Database::factory();
		return $db->User->single('Email = ? AND Password = ?', $email, self::encrypt($password));
	}
	
	public function setPassword($password, $default)
	{
		if($password)
			$this->Password = self::encrypt($password);
		elseif($default)
			$this->Password = $default;
	}
	
	public static function encrypt($password)
	{
		return md5(Config::get('salt') . $password);
	}

	public function checkPassword($password)
	{
		return self::encrypt($password) === $this->Password;
	}
	
	public static function deleteAll($ids)
	{
		if ($ids) 
		{
			$db = Database::factory();
		
			$list = '(';
			foreach ($ids as $k => $i)
			{
				$list .= "?,";
				$ids[$k] = (int) $i;
			}
			$list = substr($list, 0, strlen($list) - 1) . ')';
			
			$db->User->whereArray('Id IN ' . $list, $ids)->deleteAll();
			$db->save();

			return true;
		}

		return false;
	}

	/**
	 * Método do Active Record, retorna um array de instâncias do Model buscando do banco pelos parâmetros
	 * @param	int		$p			número da página (ex.: 1 listará de 0 á 10)	
	 * @param	int		$m			quantidade máxima de itens por página
	 * @param	string	$o			coluna a ser ordenada
	 * @param	string	$t			tipo de ordenação (asc ou desc)
	 * @param	array	$filters	filtros utilizados para pesquisar no baco (ex.: array('Title' => '%example%'))
	 * @return	array				retorna umma lista de instâncias de Model
	 */
	public static function search($p = 1, $m = 10, $o = 'Id', $t = 'asc', $filters = array())
	{
		$p = $m * (($p < 1 ? 1 : $p) - 1);

		$db = Database::factory();
		$entity = $db->User->orderBy($o, $t);
		if(is_array($filters))
		{
			$fields = array();
			$values = array();

			foreach ($filters as $k => $v)
			{
				if(is_array($v))
				{
					$fields[] = $v[0] . ' ' . $v[1] . ' ?';
					$values[] = $v[2];
				}
				else
				{
					if(preg_match('/^%(.*)%$/', $v) !== 0)
					{
						$fields[] = $k .' LIKE ?';
					}
					else
					{
						$fields[] = $k .' = ?';
					}

					$values[] = $v;
				}
			}
				
			$fields = implode(' OR ', $fields);
			$entity->whereArray($fields, $values);
		}
		return $entity->paginate($p, $m);
	}
}